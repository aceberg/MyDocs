{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Index","text":""},{"location":"#hi-there","title":"Hi there \ud83d\udc4b","text":"<p>My name is Andrew, I\u2019m currently working as Linux admin. I like easily configurable lightweight apps, that's why I choose Go for my Open Source projects. </p>"},{"location":"#hire-me","title":"Hire me","text":"<ul> <li> <p>I can create a simple Golang app for you for a minimum price (starts at $100)</p> </li> <li> <p>\ud83d\udceb How to reach me: aceberg_a@proton.me</p> </li> </ul>"},{"location":"#support-my-open-source-work","title":"Support my Open Source work","text":"<p>If you like any of my apps, here are the ways you can support me:</p> <ul> <li>With USD or RUB: https://boosty.to/aceberg/donate</li> <li>BTC: <code>bc1qj59rxmfvanvqqltq9t73qls4su3xrvwuv3sxhr</code> </li> <li>ETH: <code>0x276124c218aa8110F96989AA1f6f2Bb960C234B7</code> </li> <li>USDT (ETH Network): <code>0x276124c218aa8110F96989AA1f6f2Bb960C234B7</code></li> </ul>"},{"location":"sponsor/","title":"Sponsor","text":""},{"location":"sponsor/#hi-there","title":"Hi there \ud83d\udc4b","text":"<p>My name is Andrew, I am Linux admin and Self-Hosted apps developer.  I'm open for freelance work as sysadmin or developer.</p>"},{"location":"sponsor/#what-can-i-do","title":"What can I do?","text":"Work Price Ansible playbook, Bash script, Dockerfile starts at $10 Configure Linux server: Docker, Firewall, Monitoring, Backups and anything else $10 per hour or fixed price for fixed amount of work Golang app with web GUI starts at $100 Add feature to an existing app starts at $50 <p>All prices can be negotiated. Please, contact me aceberg_a@proton.me</p> <p>I will continue working on Open Source projects no matter what, but I need to pay the bills, so if you can donate or want to order your personal selfhosted app, be my guest \u2728</p>"},{"location":"sponsor/#support","title":"Support","text":"<p>If you find my Open Source work helpful, here are ways you can support it: - PayPal, QiWi, Bank Card ($USD or RUB): boosty - BTC: <code>bc1qj59rxmfvanvqqltq9t73qls4su3xrvwuv3sxhr</code> - ETH: <code>0x276124c218aa8110F96989AA1f6f2Bb960C234B7</code> - USDT (ETH Network): <code>0x276124c218aa8110F96989AA1f6f2Bb960C234B7</code></p>"},{"location":"tags/","title":"Tags","text":"<p>Following is a list of relevant tags:</p>"},{"location":"tags/#backup","title":"backup","text":"<ul> <li>Timeshift</li> </ul>"},{"location":"tags/#systemd","title":"systemd","text":"<ul> <li>Status: CPU, Mem</li> </ul>"},{"location":"Git/branches/","title":"Branches","text":"<p>List all branches</p> <pre><code>git branch -a\n</code></pre> <p>Create local branch dev</p> <pre><code>git branch dev\n</code></pre> <p>Create remote branch dev</p> <pre><code>git push -u origin dev\n</code></pre> <p>Delete local branch</p> <pre><code>git branch -d dev\n</code></pre> <p>Delete remote branch</p> <pre><code>git push --delete origin dev\n</code></pre>"},{"location":"Git/tags-git/","title":"Tags","text":"<p>Delete tag v0.3.2:</p> <pre><code>git push --delete origin v0.3.2\n</code></pre>"},{"location":"GitHub/ghcr-actions/","title":"Github Actions to ghcr.io fix Error","text":"<p>When running Github Action to push image to ghcr.io you can encounter this error: </p> <p>It appears because of the new repo setting. To fix this go to <code>Settings -&gt; Actions -&gt; General</code> and change workflow permissions:</p> <p></p>"},{"location":"GitHub/ppa/","title":"PPA on GitHub","text":""},{"location":"GitHub/ppa/#this-is-a-copy-of-how-to-written-by-assaf-morami-original-post-can-be-found-here","title":"This is a copy of how-to written by Assaf Morami. Original post can be found here:","text":"<p>https://assafmo.github.io/2019/05/02/ppa-repo-hosted-on-github.html</p> <p>Publishing your own Debian packages and hosting it on a GitHub repo is pretty easy. This is a quick HowTo.</p>"},{"location":"GitHub/ppa/#a-ppa-repo-can-be-as-simple-as-one-directory","title":"A PPA repo can be as simple as one directory","text":"<pre><code>.\n\u2514\u2500\u2500 my_ppa\n    \u251c\u2500\u2500 my_list_file.list\n    \u251c\u2500\u2500 InRelease\n    \u251c\u2500\u2500 KEY.gpg\n    \u251c\u2500\u2500 Packages\n    \u251c\u2500\u2500 Packages.gz\n    \u251c\u2500\u2500 Release\n    \u251c\u2500\u2500 Release.gpg\n    \u251c\u2500\u2500 package-a_0.0.1_amd64.deb\n    \u251c\u2500\u2500 package-a_0.0.2_amd64.deb\n    \u251c\u2500\u2500 package-b_0.1.0_amd64.deb\n    \u251c\u2500\u2500 package-b_0.1.1_amd64.deb\n    \u251c\u2500\u2500 ...\n    \u2514\u2500\u2500 package-z_1.0.0_amd64.deb\n</code></pre> <p>A working example can be found in https://github.com/assafmo/ppa.</p> <p>You can name <code>my_ppa</code> and <code>my_list_file.list</code> whatever you like. I used those names because it's hard to name things.</p> <p>Also don't forget to replace <code>${GITHUB_USERNAME}</code> with your GitHub user name and <code>${EMAIL}</code> with your email address.</p>"},{"location":"GitHub/ppa/#0-creating-a-github-repo-with-your-deb-packages","title":"0. Creating a GitHub repo with your deb packages","text":"<p>Create a GitHub repo. We'll call it <code>my_ppa</code>. Then go to <code>https://github.com/${GITHUB_USERNAME}/my_ppa/settings</code>, and under <code>GitHub Pages</code> select <code>Source</code> to be <code>master branch</code>.</p> <p>Any HTTP server will work just fine, but GitHub pages is free, easy and fast.</p> <p>Now clone the repo and put all of your debian packages inside:</p> <pre><code>git clone \"git@github.com:${GITHUB_USERNAME}/my_ppa.git\"\ncd my_ppa\ncp /path/to/my/package-a_0.0.1_amd64.deb .\n</code></pre>"},{"location":"GitHub/ppa/#1-creating-a-gpg-key","title":"1. Creating a GPG key","text":"<p>Install <code>gpg</code> and create a new key:</p> <pre><code>sudo apt install gnupg\ngpg --full-gen-key\n</code></pre> <p>Use RSA:</p> <pre><code>Please select what kind of key you want:\n   (1) RSA and RSA (default)\n   (2) DSA and Elgamal\n   (3) DSA (sign only)\n   (4) RSA (sign only)\nYour selection? 1\n</code></pre> <p>RSA with 4096 bits:</p> <pre><code>RSA keys may be between 1024 and 4096 bits long.\nWhat keysize do you want? (3072) 4096\n</code></pre> <p>Key should be valid forever:</p> <pre><code>Please specify how long the key should be valid.\n0 = key does not expire\n&lt;n&gt; = key expires in n days\n&lt;n&gt;w = key expires in n weeks\n&lt;n&gt;m = key expires in n months\n&lt;n&gt;y = key expires in n years\nKey is valid for? (0) 0\nKey does not expire at all\nIs this correct? (y/N) y\n</code></pre> <p>Enter your name and email:</p> <pre><code>Real name: My Name\nEmail address: ${EMAIL}\nComment:\nYou selected this USER-ID:\n\"My Name &lt;my.name@email.com&gt;\"\n\nChange (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O\n</code></pre> <p>At this point the <code>gpg</code> command will start to create your key and will ask for a passphrase for extra protection. I like to leave it blank so when I sign things with my key it won't promp for the passphrase each time.</p> <pre><code>We need to generate a lot of random bytes. It is a good idea to perform\nsome other action (type on the keyboard, move the mouse, utilize the\ndisks) during the prime generation; this gives the random number\ngenerator a better chance to gain enough entropy.\nWe need to generate a lot of random bytes. It is a good idea to perform\nsome other action (type on the keyboard, move the mouse, utilize the\ndisks) during the prime generation; this gives the random number\ngenerator a better chance to gain enough entropy.\ngpg: key B58FBB4C23247554 marked as ultimately trusted\ngpg: directory '/home/assafmo/.gnupg/openpgp-revocs.d' created\ngpg: revocation certificate stored as '/home/assafmo/.gnupg/openpgp-revocs.d/31EE74534094184D9964EF82B58FBB4C23247554.rev'\npublic and secret key created and signed.\n\npub rsa4096 2019-05-01 [SC]\n31EE74534094184D9964EF82B58FBB4C23247554\nuid My Name &lt;my.name@email.com&gt;\nsub rsa4096 2019-05-01 [E]\n</code></pre> <p>You can backup your private key using:</p> <pre><code>gpg --export-secret-keys \"${EMAIL}\" &gt; my-private-key.asc\n</code></pre> <p>And import it using:</p> <pre><code>gpg --import my-private-key.asc\n</code></pre>"},{"location":"GitHub/ppa/#2-creating-the-keygpg-file","title":"2. Creating the <code>KEY.gpg</code> file","text":"<p>Create the ASCII public key file <code>KEY.gpg</code> inside the git repo <code>my_ppa</code>:</p> <pre><code>gpg --armor --export \"${EMAIL}\" &gt; /path/to/my_ppa/KEY.gpg\n</code></pre> <p>Note: The private key is referenced by the email address you entered in the previous step.</p>"},{"location":"GitHub/ppa/#3-creating-the-packages-and-packagesgz-files","title":"3. Creating the <code>Packages</code> and <code>Packages.gz</code> files","text":"<p>Inside the git repo <code>my_ppa</code>:</p> <pre><code>dpkg-scanpackages --multiversion . &gt; Packages\ngzip -k -f Packages\n</code></pre>"},{"location":"GitHub/ppa/#4-creating-the-release-releasegpg-and-inrelease-files","title":"4. Creating the <code>Release</code>, <code>Release.gpg</code> and <code>InRelease</code> files","text":"<p>Inside the git repo <code>my_ppa</code>:</p> <pre><code>apt-ftparchive release . &gt; Release\ngpg --default-key \"${EMAIL}\" -abs -o - Release &gt; Release.gpg\ngpg --default-key \"${EMAIL}\" --clearsign -o - Release &gt; InRelease\n</code></pre>"},{"location":"GitHub/ppa/#5-creating-the-my_list_filelist-file","title":"5. Creating the <code>my_list_file.list</code> file","text":"<p>Inside the git repo <code>my_ppa</code>:</p> <pre><code>echo \"deb [signed-by=/etc/apt/trusted.gpg.d/my_ppa.gpg] https://${GITHUB_USERNAME}.github.io/my_ppa ./\" &gt; my_list_file.list\n</code></pre> <p>This file will be installed later on in the user's <code>/etc/apt/sources.list.d/</code> directory. This tells <code>apt</code> to look for updates from your PPA in <code>https://${GITHUB_USERNAME}.github.io/my_ppa</code>.</p>"},{"location":"GitHub/ppa/#thats-it","title":"That's it!","text":"<p>Commit and push to GitHub and your PPA is ready to go:</p> <pre><code>git add -A\ngit commit -m \"my ppa repo is now hosted on github\"\ngit push -u origin master\n</code></pre> <p>Now you can tell all your friends and users to install your PPA this way:</p> <pre><code>curl -s --compressed \"https://${GITHUB_USERNAME}.github.io/my_ppa/KEY.gpg\" | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/my_ppa.gpg &gt;/dev/null\nsudo curl -s --compressed -o /etc/apt/sources.list.d/my_list_file.list \"https://${GITHUB_USERNAME}.github.io/my_ppa/my_list_file.list\"\nsudo apt update\n</code></pre> <p>Then they can install your packages:</p> <pre><code>sudo apt install package-a package-b package-z\n</code></pre> <p>Whenever you publish a new version for an existing package your users will get it just like any other update.</p>"},{"location":"GitHub/ppa/#how-to-add-new-packages","title":"How to add new packages","text":"<p>Just put your new <code>.deb</code> files inside the git repo <code>my_ppa</code> and execute:</p> <pre><code># Packages &amp; Packages.gz\ndpkg-scanpackages --multiversion . &gt; Packages\ngzip -k -f Packages\n\n# Release, Release.gpg &amp; InRelease\napt-ftparchive release . &gt; Release\ngpg --default-key \"${EMAIL}\" -abs -o - Release &gt; Release.gpg\ngpg --default-key \"${EMAIL}\" --clearsign -o - Release &gt; InRelease\n\n# Commit &amp; push\ngit add -A\ngit commit -m update\ngit push\n</code></pre>"},{"location":"GitHub/ppa/#sources","title":"Sources","text":"<ul> <li>Export and import a GPG key</li> <li>Creating your own Signed APT Repository and Debian Packages   </li> <li>Create your own custom and authenticated APT repository   </li> <li>A vscode ppa example by @tagplus5</li> <li>What is the simplest Debian Packaging Guide?</li> </ul>"},{"location":"Go/gopath/","title":"GOPATH","text":"<p>Add $GOPATH in Fish shell</p> <pre><code>fish_add_path /home/username/go/bin/\n</code></pre>"},{"location":"Linux/Backup/timeshift/","title":"Timeshift","text":"<p>Create:</p> <pre><code>timeshift --create --comments \"A new backup\" \n</code></pre> <pre><code>--tags D stands for Daily Backup\n--tags W stands for Weekly Backup\n--tags M stands for Monthly Backup\n--tags O stands for On-demand Backup -- default tag\n</code></pre> <p>Restore:</p> <pre><code>timeshift --restore\n</code></pre> <p>List:</p> <pre><code>timeshift --list\n</code></pre>","tags":["backup"]},{"location":"Linux/Systemd/status-cpu/","title":"Status: CPU, Mem","text":"<p>To show CPU and Memory usage in <code>systemctl status MyService.service</code> command edit  <code>/etc/systemd/system.conf</code>:</p> <pre><code>DefaultCPUAccounting=yes\nDefaultMemoryAccounting=yes\n</code></pre> <p>Then run</p> <pre><code>systemctl daemon-reload\n</code></pre>","tags":["systemd"]},{"location":"Old/mk-index/","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"Old/mk-index/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"Old/mk-index/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"tags/","title":"Tags","text":"<p>Following is a list of relevant tags:</p>"},{"location":"tags/#backup","title":"backup","text":"<ul> <li>Timeshift</li> </ul>"},{"location":"tags/#systemd","title":"systemd","text":"<ul> <li>Status: CPU, Mem</li> </ul>"}]}